# Project Code Guidelines

**Important: Before writing new code, search for similar existing code and maintain consistent logic and style patterns.**

## Core Principles

- **Solve the right problem**: Avoid unnecessary complexity or scope creep.
- **Favor standard solutions**: Use well-known libraries and documented patterns before writing custom code.
- **Keep code clean and readable**: Use clear naming, logical structure, and avoid deeply nested logic.
- **Ensure consistent style**: Apply formatters (e.g. Prettier, Black) and linters (e.g. ESLint, Flake8) across the codebase.
- **Handle errors thoughtfully**: Consider edge cases and fail gracefully.
- **Comment with intent**: Use comments to clarify non-obvious logic. Prefer expressive code over excessive comments.
- **Design for change**: Structure code to be modular and adaptable to future changes.
- **Keep dependencies shallow**: Minimize tight coupling between modules. Maintain clear boundaries.
- **Fail fast and visibly**: Surface errors early with meaningful messages or logs.
- **Automate where practical**: Use automation for formatting, testing, and deployment to reduce manual effort and error.

## Language Standard

- **Important: Write code and UI messages in English.**
- Write logs and comments in English or Korean.
- Variable and function names: Use descriptive English terms following the project's naming conventions.

## Documentation Standards

- Keep all documentation up to date and version-controlled.
- Each document should serve a clear purpose.
- When adding new documents, place them under the docs/ directory.

### `README.md`
- Project overview and purpose
- Setup and installation steps
- Usage instructions or examples

### `ARCHITECTURE.md`
- High-level system design
- Major components and their responsibilities
- Data flow and integration points

### `DATABASE.md`
- Database schema and relationships
- Key entities and fields
- Indexing or optimization notes (if applicable)

### `PAGES.md`
- Page layout and navigation structure
- Key components per page
- User interactions and rendering logic

### `SCENARIOS.md`
- Representative user journeys
- System behavior under different conditions (e.g. error states, edge cases)

## Testing Strategy

- Write automated tests for important logic and user flows.
- Include unit tests for core functions, integration tests for data flow, and E2E tests for key scenarios.
- Keep tests fast, isolated, and reliable.
- Run tests continuously in CI.

## Build Commands
- `pnpm dev` - Start development server
- `pnpm build` - Build for production
- `pnpm start` - Run production server
- `pnpm test` - Run all tests
- `pnpm test:watch` - Run tests in watch mode
- `pnpm test:coverage` - Run tests with coverage report
- `pnpm test -- -t "test name"` - Run specific test by name

## Code Style Guidelines
- **TypeScript**: Strongly typed codebase with detailed interfaces/types in `lib/types.ts`
- **Components**: Use shadcn UI components from `components/ui/` directory
- **CSS**: Tailwind CSS for styling, use `cn()` utility from `lib/utils.ts` for class merging
- **Package Manager**: Use pnpm exclusively (`pnpm@10.6.2+`)
- **Error Handling**: Use explicit error objects with messages, leverage `apiError()` utility for API routes and `failure()` for services
- **API Responses**: Use `apiSuccess()` and `apiError()` utilities for consistent API formatting
- **Service Results**: Use `success()` and `failure()` from `service-utils.ts` for service layer responses
- **DynamoDB**: Follow access patterns in service files in `lib/services/`
- **Naming**: PascalCase for types/interfaces, camelCase for variables/functions
- **Constants**: Use defined constants from `lib/constants.ts` instead of magic strings
- **Comments**: Document complex functions with JSDoc format
- **AWS SDK**: Use AWS SDK v3 clients from dedicated files (`dynamodb.ts`, `s3.ts`, etc.)
- **File Formatting**: Files should have final newline, use LF line endings, and trim trailing whitespace (see .editorconfig)

## Project Structure
- `/app` - Next.js App Router (pages, API routes)
- `/components` - Reusable UI + domain-specific components
- `/lib` - Business logic, services, types and utilities
- `/__tests__` - Test files with parallel structure to implementation files

## Deployment
Built as container image and deployed to Amazon EKS.
